initSidebarItems({"enum":[["Call","Contains one variant per dispatchable that can be called by an extrinsic."],["Error","Custom dispatch errors of this pallet."],["Event","The event emitted by this pallet."]],"struct":[["GenesisConfig","Can be used to configure the genesis state of this pallet."],["Pallet","The pallet implementing the on-chain logic."],["_GeneratedPrefixForStorageActiveBlockCount",""],["_GeneratedPrefixForStorageErrors",""],["_GeneratedPrefixForStorageNonce",""],["_GeneratedPrefixForStorageParachainStatus",""]],"trait":[["Config","Configuration"]],"type":[["ActiveBlockCount","Like frame_system::block_number, but this one only increments if the parachain status is RUNNING. This variable is used to keep track of durations, such as the issue/redeem/replace expiry. If the parachain is not RUNNING, no payment proofs can be submitted, and it wouldn’t be fair to punish the user/vault. By using this variable we ensure that they have sufficient time to submit their proof."],["Errors","Set of ErrorCodes, indicating the reason for an “Error” ParachainStatus."],["Module","Type alias to `Pallet`, to be used by `construct_runtime`."],["Nonce","Integer increment-only counter, used to prevent collisions when generating identifiers for e.g. issue, redeem or replace requests (for OP_RETURN field in Bitcoin)."],["ParachainStatus","Integer/Enum defining the current state of the BTC-Parachain."]]});